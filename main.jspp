//this is the code that it is running
alias! fn = function;

class Num {
    constructor(value) {
        this.value = value;
    }
    [Symbol.display]() {
        return this.value;
    }
    ["+"](other) {
        return new Num(this.value + other.value);
    }
}
macro! normal_macro() {
    console.log("hi")
}

@proc!
fn proc_macro(token) {
    return `console.log(${token.raw})`
}

proc_macro!("hello");


normal_macro!();

fn foo(t) {
    return (...args) => {
        console.log("foo");
        return t(...args);
    }
}
fn bar(t) {
    return (...args) => {
        console.log("bar");
        return t(...args);
    }
}
fn calling(t) {
    return (...args) => {
        console.log(`calling function`);
        return t(...args);
    }
}
@(foo, bar, calling)
fn add(p) {
    *p++;
}

@calling
fn sub(p) {
    *p--;
}
let h = 0;
console.log(h);
add(&h);
console.log(h);
add(&h);
console.log(h);
add(&h);
console.log(h);
add(&h);
console.log(h);
add(&h);
console.log(h);
sub(&h);
console.log(h);
const a = new Num(1);
const b = new Num(4);
console.log(a+b);
(async () => {
    const v = await fetch("./main.jspp");
    const t = await v.text();
    $.body().child($.create("div").text(t).css({
        "white-space": "pre"
    }));
 })();
